/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectMetadata
 */
export interface ProjectMetadata {
    /**
     * The Project's Creation Date
     * @type {Date}
     * @memberof ProjectMetadata
     */
    created_at: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectMetadata
     */
    hosts: Array<string>;
    /**
     * The project's ID.
     * @type {string}
     * @memberof ProjectMetadata
     */
    readonly id: string;
    /**
     * The project's name if set
     * @type {string}
     * @memberof ProjectMetadata
     */
    name: string;
    /**
     * The project's slug
     * @type {string}
     * @memberof ProjectMetadata
     */
    readonly slug?: string;
    /**
     * The state of the project.
     * running Running
     * halted Halted
     * deleted Deleted
     * @type {string}
     * @memberof ProjectMetadata
     */
    state: ProjectMetadataStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectMetadata
     */
    subscription_id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectMetadata
     */
    subscription_plan?: string | null;
    /**
     * Last Time Project was Updated
     * @type {Date}
     * @memberof ProjectMetadata
     */
    updated_at: Date;
    /**
     * 
     * @type {string}
     * @memberof ProjectMetadata
     */
    workspace_id?: string | null;
}


/**
 * @export
 */
export const ProjectMetadataStateEnum = {
    Running: 'running',
    Halted: 'halted',
    Deleted: 'deleted'
} as const;
export type ProjectMetadataStateEnum = typeof ProjectMetadataStateEnum[keyof typeof ProjectMetadataStateEnum];


/**
 * Check if a given object implements the ProjectMetadata interface.
 */
export function instanceOfProjectMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "hosts" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "updated_at" in value;

    return isInstance;
}

export function ProjectMetadataFromJSON(json: any): ProjectMetadata {
    return ProjectMetadataFromJSONTyped(json, false);
}

export function ProjectMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created_at': (new Date(json['created_at'])),
        'hosts': json['hosts'],
        'id': json['id'],
        'name': json['name'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'state': json['state'],
        'subscription_id': !exists(json, 'subscription_id') ? undefined : json['subscription_id'],
        'subscription_plan': !exists(json, 'subscription_plan') ? undefined : json['subscription_plan'],
        'updated_at': (new Date(json['updated_at'])),
        'workspace_id': !exists(json, 'workspace_id') ? undefined : json['workspace_id'],
    };
}

export function ProjectMetadataToJSON(value?: ProjectMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.created_at.toISOString()),
        'hosts': value.hosts,
        'name': value.name,
        'state': value.state,
        'subscription_id': value.subscription_id,
        'subscription_plan': value.subscription_plan,
        'updated_at': (value.updated_at.toISOString()),
        'workspace_id': value.workspace_id,
    };
}

