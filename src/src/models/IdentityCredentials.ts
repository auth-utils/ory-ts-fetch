/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IdentityCredentialsType } from './IdentityCredentialsType';
import {
    IdentityCredentialsTypeFromJSON,
    IdentityCredentialsTypeFromJSONTyped,
    IdentityCredentialsTypeToJSON,
} from './IdentityCredentialsType';

/**
 * Credentials represents a specific credential type
 * @export
 * @interface IdentityCredentials
 */
export interface IdentityCredentials {
    /**
     * 
     * @type {object}
     * @memberof IdentityCredentials
     */
    config?: object;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof IdentityCredentials
     */
    created_at?: Date;
    /**
     * Identifiers represents a list of unique identifiers this credential type matches.
     * @type {Array<string>}
     * @memberof IdentityCredentials
     */
    identifiers?: Array<string>;
    /**
     * 
     * @type {IdentityCredentialsType}
     * @memberof IdentityCredentials
     */
    type?: IdentityCredentialsType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof IdentityCredentials
     */
    updated_at?: Date;
    /**
     * Version refers to the version of the credential. Useful when changing the config schema.
     * @type {number}
     * @memberof IdentityCredentials
     */
    version?: number;
}

/**
 * Check if a given object implements the IdentityCredentials interface.
 */
export function instanceOfIdentityCredentials(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IdentityCredentialsFromJSON(json: any): IdentityCredentials {
    return IdentityCredentialsFromJSONTyped(json, false);
}

export function IdentityCredentialsFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityCredentials {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'config': !exists(json, 'config') ? undefined : json['config'],
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'identifiers': !exists(json, 'identifiers') ? undefined : json['identifiers'],
        'type': !exists(json, 'type') ? undefined : IdentityCredentialsTypeFromJSON(json['type']),
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function IdentityCredentialsToJSON(value?: IdentityCredentials | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'config': value.config,
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'identifiers': value.identifiers,
        'type': IdentityCredentialsTypeToJSON(value.type),
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
        'version': value.version,
    };
}

