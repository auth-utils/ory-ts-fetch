/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UiText } from './UiText';
import {
    UiTextFromJSON,
    UiTextFromJSONTyped,
    UiTextToJSON,
} from './UiText';

/**
 * InputAttributes represents the attributes of an input node
 * @export
 * @interface UiNodeInputAttributes
 */
export interface UiNodeInputAttributes {
    /**
     * The autocomplete attribute for the input.
     * email InputAttributeAutocompleteEmail
     * tel InputAttributeAutocompleteTel
     * url InputAttributeAutocompleteUrl
     * current-password InputAttributeAutocompleteCurrentPassword
     * new-password InputAttributeAutocompleteNewPassword
     * one-time-code InputAttributeAutocompleteOneTimeCode
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    autocomplete?: UiNodeInputAttributesAutocompleteEnum;
    /**
     * Sets the input's disabled field to true or false.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    disabled: boolean;
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeInputAttributes
     */
    label?: UiText;
    /**
     * The input's element name.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    name: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    node_type: string;
    /**
     * OnClick may contain javascript which should be executed on click. This is primarily
     * used for WebAuthn.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    onclick?: string;
    /**
     * The input's pattern.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    pattern?: string;
    /**
     * Mark this input field as required.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    required?: boolean;
    /**
     * The input's element type.
     * text InputAttributeTypeText
     * password InputAttributeTypePassword
     * number InputAttributeTypeNumber
     * checkbox InputAttributeTypeCheckbox
     * hidden InputAttributeTypeHidden
     * email InputAttributeTypeEmail
     * tel InputAttributeTypeTel
     * submit InputAttributeTypeSubmit
     * button InputAttributeTypeButton
     * datetime-local InputAttributeTypeDateTimeLocal
     * date InputAttributeTypeDate
     * url InputAttributeTypeURI
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    type: UiNodeInputAttributesTypeEnum;
    /**
     * The input's value.
     * @type {any}
     * @memberof UiNodeInputAttributes
     */
    value?: any | null;
}


/**
 * @export
 */
export const UiNodeInputAttributesAutocompleteEnum = {
    Email: 'email',
    Tel: 'tel',
    Url: 'url',
    CurrentPassword: 'current-password',
    NewPassword: 'new-password',
    OneTimeCode: 'one-time-code'
} as const;
export type UiNodeInputAttributesAutocompleteEnum = typeof UiNodeInputAttributesAutocompleteEnum[keyof typeof UiNodeInputAttributesAutocompleteEnum];

/**
 * @export
 */
export const UiNodeInputAttributesTypeEnum = {
    Text: 'text',
    Password: 'password',
    Number: 'number',
    Checkbox: 'checkbox',
    Hidden: 'hidden',
    Email: 'email',
    Tel: 'tel',
    Submit: 'submit',
    Button: 'button',
    DatetimeLocal: 'datetime-local',
    Date: 'date',
    Url: 'url'
} as const;
export type UiNodeInputAttributesTypeEnum = typeof UiNodeInputAttributesTypeEnum[keyof typeof UiNodeInputAttributesTypeEnum];


/**
 * Check if a given object implements the UiNodeInputAttributes interface.
 */
export function instanceOfUiNodeInputAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "disabled" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "node_type" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function UiNodeInputAttributesFromJSON(json: any): UiNodeInputAttributes {
    return UiNodeInputAttributesFromJSONTyped(json, false);
}

export function UiNodeInputAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiNodeInputAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autocomplete': !exists(json, 'autocomplete') ? undefined : json['autocomplete'],
        'disabled': json['disabled'],
        'label': !exists(json, 'label') ? undefined : UiTextFromJSON(json['label']),
        'name': json['name'],
        'node_type': json['node_type'],
        'onclick': !exists(json, 'onclick') ? undefined : json['onclick'],
        'pattern': !exists(json, 'pattern') ? undefined : json['pattern'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'type': json['type'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function UiNodeInputAttributesToJSON(value?: UiNodeInputAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autocomplete': value.autocomplete,
        'disabled': value.disabled,
        'label': UiTextToJSON(value.label),
        'name': value.name,
        'node_type': value.node_type,
        'onclick': value.onclick,
        'pattern': value.pattern,
        'required': value.required,
        'type': value.type,
        'value': value.value,
    };
}

