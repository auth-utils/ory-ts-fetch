/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UiContainer } from './UiContainer';
import {
    UiContainerFromJSON,
    UiContainerFromJSONTyped,
    UiContainerToJSON,
} from './UiContainer';

/**
 * Used to verify an out-of-band communication
 * channel such as an email address or a phone number.
 * 
 * For more information head over to: https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation
 * @export
 * @interface VerificationFlow
 */
export interface VerificationFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially
     * not set.
     * @type {string}
     * @memberof VerificationFlow
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address,
     * a new request has to be initiated.
     * @type {Date}
     * @memberof VerificationFlow
     */
    expires_at?: Date;
    /**
     * ID represents the request's unique ID. When performing the verification flow, this
     * represents the id in the verify ui's query parameter: http://<selfservice.flows.verification.ui_url>?request=<id>
     * 
     * type: string
     * format: uuid
     * @type {string}
     * @memberof VerificationFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {Date}
     * @memberof VerificationFlow
     */
    issued_at?: Date;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     * @type {string}
     * @memberof VerificationFlow
     */
    request_url?: string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof VerificationFlow
     */
    return_to?: string;
    /**
     * State represents the state of this request:
     * 
     * choose_method: ask the user to choose a method (e.g. verify your email)
     * sent_email: the email has been sent to the user
     * passed_challenge: the request was successful and the verification challenge was passed.
     * @type {any}
     * @memberof VerificationFlow
     */
    state: any | null;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof VerificationFlow
     */
    type: string;
    /**
     * 
     * @type {UiContainer}
     * @memberof VerificationFlow
     */
    ui: UiContainer;
}

/**
 * Check if a given object implements the VerificationFlow interface.
 */
export function instanceOfVerificationFlow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "ui" in value;

    return isInstance;
}

export function VerificationFlowFromJSON(json: any): VerificationFlow {
    return VerificationFlowFromJSONTyped(json, false);
}

export function VerificationFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerificationFlow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'expires_at': !exists(json, 'expires_at') ? undefined : (new Date(json['expires_at'])),
        'id': json['id'],
        'issued_at': !exists(json, 'issued_at') ? undefined : (new Date(json['issued_at'])),
        'request_url': !exists(json, 'request_url') ? undefined : json['request_url'],
        'return_to': !exists(json, 'return_to') ? undefined : json['return_to'],
        'state': json['state'],
        'type': json['type'],
        'ui': UiContainerFromJSON(json['ui']),
    };
}

export function VerificationFlowToJSON(value?: VerificationFlow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'expires_at': value.expires_at === undefined ? undefined : (value.expires_at.toISOString()),
        'id': value.id,
        'issued_at': value.issued_at === undefined ? undefined : (value.issued_at.toISOString()),
        'request_url': value.request_url,
        'return_to': value.return_to,
        'state': value.state,
        'type': value.type,
        'ui': UiContainerToJSON(value.ui),
    };
}

