/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Used when an administrator creates a recovery code for an identity.
 * @export
 * @interface RecoveryCodeForIdentity
 */
export interface RecoveryCodeForIdentity {
    /**
     * Expires At is the timestamp of when the recovery flow expires
     * 
     * The timestamp when the recovery code expires.
     * @type {Date}
     * @memberof RecoveryCodeForIdentity
     */
    expires_at?: Date;
    /**
     * RecoveryCode is the code that can be used to recover the account
     * @type {string}
     * @memberof RecoveryCodeForIdentity
     */
    recovery_code: string;
    /**
     * RecoveryLink with flow
     * 
     * This link opens the recovery UI with an empty `code` field.
     * @type {string}
     * @memberof RecoveryCodeForIdentity
     */
    recovery_link: string;
}

/**
 * Check if a given object implements the RecoveryCodeForIdentity interface.
 */
export function instanceOfRecoveryCodeForIdentity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "recovery_code" in value;
    isInstance = isInstance && "recovery_link" in value;

    return isInstance;
}

export function RecoveryCodeForIdentityFromJSON(json: any): RecoveryCodeForIdentity {
    return RecoveryCodeForIdentityFromJSONTyped(json, false);
}

export function RecoveryCodeForIdentityFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecoveryCodeForIdentity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'expires_at': !exists(json, 'expires_at') ? undefined : (new Date(json['expires_at'])),
        'recovery_code': json['recovery_code'],
        'recovery_link': json['recovery_link'],
    };
}

export function RecoveryCodeForIdentityToJSON(value?: RecoveryCodeForIdentity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'expires_at': value.expires_at === undefined ? undefined : (value.expires_at.toISOString()),
        'recovery_code': value.recovery_code,
        'recovery_link': value.recovery_link,
    };
}

