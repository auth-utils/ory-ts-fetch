/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Error response
 * @export
 * @interface GenericErrorContent
 */
export interface GenericErrorContent {
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof GenericErrorContent
     */
    debug?: string;
    /**
     * Name is the error name.
     * @type {string}
     * @memberof GenericErrorContent
     */
    error?: string;
    /**
     * Description contains further information on the nature of the error.
     * @type {string}
     * @memberof GenericErrorContent
     */
    error_description?: string;
    /**
     * Message contains the error message.
     * @type {string}
     * @memberof GenericErrorContent
     */
    message?: string;
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof GenericErrorContent
     */
    status_code?: number;
}

/**
 * Check if a given object implements the GenericErrorContent interface.
 */
export function instanceOfGenericErrorContent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GenericErrorContentFromJSON(json: any): GenericErrorContent {
    return GenericErrorContentFromJSONTyped(json, false);
}

export function GenericErrorContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericErrorContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'debug': !exists(json, 'debug') ? undefined : json['debug'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'error_description': !exists(json, 'error_description') ? undefined : json['error_description'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'status_code': !exists(json, 'status_code') ? undefined : json['status_code'],
    };
}

export function GenericErrorContentToJSON(value?: GenericErrorContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'debug': value.debug,
        'error': value.error,
        'error_description': value.error_description,
        'message': value.message,
        'status_code': value.status_code,
    };
}

