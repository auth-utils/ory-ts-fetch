/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Introspection contains an access token's session data as specified by
 * [IETF RFC 7662](https://tools.ietf.org/html/rfc7662)
 * @export
 * @interface IntrospectedOAuth2Token
 */
export interface IntrospectedOAuth2Token {
    /**
     * Active is a boolean indicator of whether or not the presented token
     * is currently active.  The specifics of a token's "active" state
     * will vary depending on the implementation of the authorization
     * server and the information it keeps about its tokens, but a "true"
     * value return for the "active" property will generally indicate
     * that a given token has been issued by this authorization server,
     * has not been revoked by the resource owner, and is within its
     * given time window of validity (e.g., after its issuance time and
     * before its expiration time).
     * @type {boolean}
     * @memberof IntrospectedOAuth2Token
     */
    active: boolean;
    /**
     * Audience contains a list of the token's intended audiences.
     * @type {Array<string>}
     * @memberof IntrospectedOAuth2Token
     */
    aud?: Array<string>;
    /**
     * ID is aclient identifier for the OAuth 2.0 client that
     * requested this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    client_id?: string;
    /**
     * Expires at is an integer timestamp, measured in the number of seconds
     * since January 1 1970 UTC, indicating when this token will expire.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    exp?: number;
    /**
     * Extra is arbitrary data set by the session.
     * @type {{ [key: string]: any; }}
     * @memberof IntrospectedOAuth2Token
     */
    ext?: { [key: string]: any; };
    /**
     * Issued at is an integer timestamp, measured in the number of seconds
     * since January 1 1970 UTC, indicating when this token was
     * originally issued.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    iat?: number;
    /**
     * IssuerURL is a string representing the issuer of this token
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    iss?: string;
    /**
     * NotBefore is an integer timestamp, measured in the number of seconds
     * since January 1 1970 UTC, indicating when this token is not to be
     * used before.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    nbf?: number;
    /**
     * ObfuscatedSubject is set when the subject identifier algorithm was set to "pairwise" during authorization.
     * It is the `sub` value of the ID Token that was issued.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    obfuscated_subject?: string;
    /**
     * Scope is a JSON string containing a space-separated list of
     * scopes associated with this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    scope?: string;
    /**
     * Subject of the token, as defined in JWT [RFC7519].
     * Usually a machine-readable identifier of the resource owner who
     * authorized this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    sub?: string;
    /**
     * TokenType is the introspected token's type, typically `Bearer`.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    token_type?: string;
    /**
     * TokenUse is the introspected token's use, for example `access_token` or `refresh_token`.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    token_use?: string;
    /**
     * Username is a human-readable identifier for the resource owner who
     * authorized this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    username?: string;
}

/**
 * Check if a given object implements the IntrospectedOAuth2Token interface.
 */
export function instanceOfIntrospectedOAuth2Token(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "active" in value;

    return isInstance;
}

export function IntrospectedOAuth2TokenFromJSON(json: any): IntrospectedOAuth2Token {
    return IntrospectedOAuth2TokenFromJSONTyped(json, false);
}

export function IntrospectedOAuth2TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntrospectedOAuth2Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': json['active'],
        'aud': !exists(json, 'aud') ? undefined : json['aud'],
        'client_id': !exists(json, 'client_id') ? undefined : json['client_id'],
        'exp': !exists(json, 'exp') ? undefined : json['exp'],
        'ext': !exists(json, 'ext') ? undefined : json['ext'],
        'iat': !exists(json, 'iat') ? undefined : json['iat'],
        'iss': !exists(json, 'iss') ? undefined : json['iss'],
        'nbf': !exists(json, 'nbf') ? undefined : json['nbf'],
        'obfuscated_subject': !exists(json, 'obfuscated_subject') ? undefined : json['obfuscated_subject'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'sub': !exists(json, 'sub') ? undefined : json['sub'],
        'token_type': !exists(json, 'token_type') ? undefined : json['token_type'],
        'token_use': !exists(json, 'token_use') ? undefined : json['token_use'],
        'username': !exists(json, 'username') ? undefined : json['username'],
    };
}

export function IntrospectedOAuth2TokenToJSON(value?: IntrospectedOAuth2Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'aud': value.aud,
        'client_id': value.client_id,
        'exp': value.exp,
        'ext': value.ext,
        'iat': value.iat,
        'iss': value.iss,
        'nbf': value.nbf,
        'obfuscated_subject': value.obfuscated_subject,
        'scope': value.scope,
        'sub': value.sub,
        'token_type': value.token_type,
        'token_use': value.token_use,
        'username': value.username,
    };
}

