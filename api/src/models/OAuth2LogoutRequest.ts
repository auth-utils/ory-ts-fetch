/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OAuth2Client } from './OAuth2Client';
import {
    OAuth2ClientFromJSON,
    OAuth2ClientFromJSONTyped,
    OAuth2ClientToJSON,
} from './OAuth2Client';

/**
 * 
 * @export
 * @interface OAuth2LogoutRequest
 */
export interface OAuth2LogoutRequest {
    /**
     * Challenge is the identifier ("logout challenge") of the logout authentication request. It is used to
     * identify the session.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    challenge?: string;
    /**
     * 
     * @type {OAuth2Client}
     * @memberof OAuth2LogoutRequest
     */
    client?: OAuth2Client;
    /**
     * RequestURL is the original Logout URL requested.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    request_url?: string;
    /**
     * RPInitiated is set to true if the request was initiated by a Relying Party (RP), also known as an OAuth 2.0 Client.
     * @type {boolean}
     * @memberof OAuth2LogoutRequest
     */
    rp_initiated?: boolean;
    /**
     * SessionID is the login session ID that was requested to log out.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    sid?: string;
    /**
     * Subject is the user for whom the logout was request.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    subject?: string;
}

/**
 * Check if a given object implements the OAuth2LogoutRequest interface.
 */
export function instanceOfOAuth2LogoutRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OAuth2LogoutRequestFromJSON(json: any): OAuth2LogoutRequest {
    return OAuth2LogoutRequestFromJSONTyped(json, false);
}

export function OAuth2LogoutRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2LogoutRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challenge': !exists(json, 'challenge') ? undefined : json['challenge'],
        'client': !exists(json, 'client') ? undefined : OAuth2ClientFromJSON(json['client']),
        'request_url': !exists(json, 'request_url') ? undefined : json['request_url'],
        'rp_initiated': !exists(json, 'rp_initiated') ? undefined : json['rp_initiated'],
        'sid': !exists(json, 'sid') ? undefined : json['sid'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
    };
}

export function OAuth2LogoutRequestToJSON(value?: OAuth2LogoutRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge': value.challenge,
        'client': OAuth2ClientToJSON(value.client),
        'request_url': value.request_url,
        'rp_initiated': value.rp_initiated,
        'sid': value.sid,
        'subject': value.subject,
    };
}

