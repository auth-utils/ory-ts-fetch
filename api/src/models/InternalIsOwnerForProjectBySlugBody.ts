/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Is Owner For Project By Slug Request Body
 * @export
 * @interface InternalIsOwnerForProjectBySlugBody
 */
export interface InternalIsOwnerForProjectBySlugBody {
    /**
     * Namespace is the namespace of the subject.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    namespace: InternalIsOwnerForProjectBySlugBodyNamespaceEnum;
    /**
     * ProjectScope is the project_id resolved from the
     * API Token.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    project_scope?: string;
    /**
     * ProjectSlug is the project's slug.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    project_slug: string;
    /**
     * Subject is the subject acting (user or API key).
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    subject: string;
}


/**
 * @export
 */
export const InternalIsOwnerForProjectBySlugBodyNamespaceEnum = {
    User: 'User',
    ApiKey: ' ApiKey'
} as const;
export type InternalIsOwnerForProjectBySlugBodyNamespaceEnum = typeof InternalIsOwnerForProjectBySlugBodyNamespaceEnum[keyof typeof InternalIsOwnerForProjectBySlugBodyNamespaceEnum];


/**
 * Check if a given object implements the InternalIsOwnerForProjectBySlugBody interface.
 */
export function instanceOfInternalIsOwnerForProjectBySlugBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "namespace" in value;
    isInstance = isInstance && "project_slug" in value;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function InternalIsOwnerForProjectBySlugBodyFromJSON(json: any): InternalIsOwnerForProjectBySlugBody {
    return InternalIsOwnerForProjectBySlugBodyFromJSONTyped(json, false);
}

export function InternalIsOwnerForProjectBySlugBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalIsOwnerForProjectBySlugBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'namespace': json['namespace'],
        'project_scope': !exists(json, 'project_scope') ? undefined : json['project_scope'],
        'project_slug': json['project_slug'],
        'subject': json['subject'],
    };
}

export function InternalIsOwnerForProjectBySlugBodyToJSON(value?: InternalIsOwnerForProjectBySlugBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'namespace': value.namespace,
        'project_scope': value.project_scope,
        'project_slug': value.project_slug,
        'subject': value.subject,
    };
}

