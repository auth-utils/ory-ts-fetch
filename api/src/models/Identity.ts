/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IdentityCredentials } from './IdentityCredentials';
import {
    IdentityCredentialsFromJSON,
    IdentityCredentialsFromJSONTyped,
    IdentityCredentialsToJSON,
} from './IdentityCredentials';
import type { IdentityState } from './IdentityState';
import {
    IdentityStateFromJSON,
    IdentityStateFromJSONTyped,
    IdentityStateToJSON,
} from './IdentityState';
import type { RecoveryIdentityAddress } from './RecoveryIdentityAddress';
import {
    RecoveryIdentityAddressFromJSON,
    RecoveryIdentityAddressFromJSONTyped,
    RecoveryIdentityAddressToJSON,
} from './RecoveryIdentityAddress';
import type { VerifiableIdentityAddress } from './VerifiableIdentityAddress';
import {
    VerifiableIdentityAddressFromJSON,
    VerifiableIdentityAddressFromJSONTyped,
    VerifiableIdentityAddressToJSON,
} from './VerifiableIdentityAddress';

/**
 * An [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) represents a (human) user in Ory.
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof Identity
     */
    created_at?: Date;
    /**
     * Credentials represents all credentials that can be used for authenticating this identity.
     * @type {{ [key: string]: IdentityCredentials; }}
     * @memberof Identity
     */
    credentials?: { [key: string]: IdentityCredentials; };
    /**
     * ID is the identity's unique identifier.
     * 
     * The Identity ID can not be changed and can not be chosen. This ensures future
     * compatibility and optimization for distributed stores such as CockroachDB.
     * @type {string}
     * @memberof Identity
     */
    id: string;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    metadata_admin?: object | null;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    metadata_public?: object | null;
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    organization_id?: string | null;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     * @type {Array<RecoveryIdentityAddress>}
     * @memberof Identity
     */
    recovery_addresses?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
     * @type {string}
     * @memberof Identity
     */
    schema_id: string;
    /**
     * SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.
     * 
     * format: url
     * @type {string}
     * @memberof Identity
     */
    schema_url: string;
    /**
     * 
     * @type {IdentityState}
     * @memberof Identity
     */
    state?: IdentityState;
    /**
     * 
     * @type {Date}
     * @memberof Identity
     */
    state_changed_at?: Date;
    /**
     * Traits represent an identity's traits. The identity is able to create, modify, and delete traits
     * in a self-service manner. The input will always be validated against the JSON Schema defined
     * in `schema_url`.
     * @type {any}
     * @memberof Identity
     */
    traits: any | null;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof Identity
     */
    updated_at?: Date;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof Identity
     */
    verifiable_addresses?: Array<VerifiableIdentityAddress>;
}

/**
 * Check if a given object implements the Identity interface.
 */
export function instanceOfIdentity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "schema_id" in value;
    isInstance = isInstance && "schema_url" in value;
    isInstance = isInstance && "traits" in value;

    return isInstance;
}

export function IdentityFromJSON(json: any): Identity {
    return IdentityFromJSONTyped(json, false);
}

export function IdentityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Identity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'credentials': !exists(json, 'credentials') ? undefined : (mapValues(json['credentials'], IdentityCredentialsFromJSON)),
        'id': json['id'],
        'metadata_admin': !exists(json, 'metadata_admin') ? undefined : json['metadata_admin'],
        'metadata_public': !exists(json, 'metadata_public') ? undefined : json['metadata_public'],
        'organization_id': !exists(json, 'organization_id') ? undefined : json['organization_id'],
        'recovery_addresses': !exists(json, 'recovery_addresses') ? undefined : ((json['recovery_addresses'] as Array<any>).map(RecoveryIdentityAddressFromJSON)),
        'schema_id': json['schema_id'],
        'schema_url': json['schema_url'],
        'state': !exists(json, 'state') ? undefined : IdentityStateFromJSON(json['state']),
        'state_changed_at': !exists(json, 'state_changed_at') ? undefined : (new Date(json['state_changed_at'])),
        'traits': json['traits'],
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'verifiable_addresses': !exists(json, 'verifiable_addresses') ? undefined : ((json['verifiable_addresses'] as Array<any>).map(VerifiableIdentityAddressFromJSON)),
    };
}

export function IdentityToJSON(value?: Identity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'credentials': value.credentials === undefined ? undefined : (mapValues(value.credentials, IdentityCredentialsToJSON)),
        'id': value.id,
        'metadata_admin': value.metadata_admin,
        'metadata_public': value.metadata_public,
        'organization_id': value.organization_id,
        'recovery_addresses': value.recovery_addresses === undefined ? undefined : ((value.recovery_addresses as Array<any>).map(RecoveryIdentityAddressToJSON)),
        'schema_id': value.schema_id,
        'schema_url': value.schema_url,
        'state': IdentityStateToJSON(value.state),
        'state_changed_at': value.state_changed_at === undefined ? undefined : (value.state_changed_at.toISOString()),
        'traits': value.traits,
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
        'verifiable_addresses': value.verifiable_addresses === undefined ? undefined : ((value.verifiable_addresses as Array<any>).map(VerifiableIdentityAddressToJSON)),
    };
}

