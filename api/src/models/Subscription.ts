/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    readonly created_at: Date;
    /**
     * The currency of the subscription. To change this, a new subscription must be created.
     * usd USD
     * eur Euro
     * @type {string}
     * @memberof Subscription
     */
    readonly currency: SubscriptionCurrencyEnum;
    /**
     * The currently active interval of the subscription
     * monthly Monthly
     * yearly Yearly
     * @type {string}
     * @memberof Subscription
     */
    readonly current_interval: SubscriptionCurrentIntervalEnum;
    /**
     * The currently active plan of the subscription
     * @type {string}
     * @memberof Subscription
     */
    readonly current_plan: string;
    /**
     * The ID of the stripe customer
     * @type {string}
     * @memberof Subscription
     */
    readonly customer_id: string;
    /**
     * The ID of the subscription
     * @type {string}
     * @memberof Subscription
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    interval_changes_to: string | null;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    ongoing_stripe_checkout_id?: string | null;
    /**
     * Until when the subscription is payed
     * @type {Date}
     * @memberof Subscription
     */
    readonly payed_until: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    plan_changes_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    plan_changes_to: string | null;
    /**
     * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
     * 
     * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
     * 
     * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
     * 
     * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     * @type {string}
     * @memberof Subscription
     */
    status: string;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    readonly updated_at: Date;
}


/**
 * @export
 */
export const SubscriptionCurrencyEnum = {
    Usd: 'usd',
    Eur: 'eur'
} as const;
export type SubscriptionCurrencyEnum = typeof SubscriptionCurrencyEnum[keyof typeof SubscriptionCurrencyEnum];

/**
 * @export
 */
export const SubscriptionCurrentIntervalEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;
export type SubscriptionCurrentIntervalEnum = typeof SubscriptionCurrentIntervalEnum[keyof typeof SubscriptionCurrentIntervalEnum];


/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "current_interval" in value;
    isInstance = isInstance && "current_plan" in value;
    isInstance = isInstance && "customer_id" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "interval_changes_to" in value;
    isInstance = isInstance && "payed_until" in value;
    isInstance = isInstance && "plan_changes_to" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "updated_at" in value;

    return isInstance;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created_at': (new Date(json['created_at'])),
        'currency': json['currency'],
        'current_interval': json['current_interval'],
        'current_plan': json['current_plan'],
        'customer_id': json['customer_id'],
        'id': json['id'],
        'interval_changes_to': json['interval_changes_to'],
        'ongoing_stripe_checkout_id': !exists(json, 'ongoing_stripe_checkout_id') ? undefined : json['ongoing_stripe_checkout_id'],
        'payed_until': (new Date(json['payed_until'])),
        'plan_changes_at': !exists(json, 'plan_changes_at') ? undefined : (new Date(json['plan_changes_at'])),
        'plan_changes_to': json['plan_changes_to'],
        'status': json['status'],
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function SubscriptionToJSON(value?: Subscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interval_changes_to': value.interval_changes_to,
        'ongoing_stripe_checkout_id': value.ongoing_stripe_checkout_id,
        'plan_changes_at': value.plan_changes_at === undefined ? undefined : (value.plan_changes_at.toISOString()),
        'plan_changes_to': value.plan_changes_to,
        'status': value.status,
    };
}

