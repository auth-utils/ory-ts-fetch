/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProjectServiceIdentity } from './ProjectServiceIdentity';
import {
    ProjectServiceIdentityFromJSON,
    ProjectServiceIdentityFromJSONTyped,
    ProjectServiceIdentityToJSON,
} from './ProjectServiceIdentity';
import type { ProjectServiceOAuth2 } from './ProjectServiceOAuth2';
import {
    ProjectServiceOAuth2FromJSON,
    ProjectServiceOAuth2FromJSONTyped,
    ProjectServiceOAuth2ToJSON,
} from './ProjectServiceOAuth2';
import type { ProjectServicePermission } from './ProjectServicePermission';
import {
    ProjectServicePermissionFromJSON,
    ProjectServicePermissionFromJSONTyped,
    ProjectServicePermissionToJSON,
} from './ProjectServicePermission';

/**
 * 
 * @export
 * @interface ProjectServices
 */
export interface ProjectServices {
    /**
     * 
     * @type {ProjectServiceIdentity}
     * @memberof ProjectServices
     */
    identity?: ProjectServiceIdentity;
    /**
     * 
     * @type {ProjectServiceOAuth2}
     * @memberof ProjectServices
     */
    oauth2?: ProjectServiceOAuth2;
    /**
     * 
     * @type {ProjectServicePermission}
     * @memberof ProjectServices
     */
    permission?: ProjectServicePermission;
}

/**
 * Check if a given object implements the ProjectServices interface.
 */
export function instanceOfProjectServices(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProjectServicesFromJSON(json: any): ProjectServices {
    return ProjectServicesFromJSONTyped(json, false);
}

export function ProjectServicesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectServices {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identity': !exists(json, 'identity') ? undefined : ProjectServiceIdentityFromJSON(json['identity']),
        'oauth2': !exists(json, 'oauth2') ? undefined : ProjectServiceOAuth2FromJSON(json['oauth2']),
        'permission': !exists(json, 'permission') ? undefined : ProjectServicePermissionFromJSON(json['permission']),
    };
}

export function ProjectServicesToJSON(value?: ProjectServices | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identity': ProjectServiceIdentityToJSON(value.identity),
        'oauth2': ProjectServiceOAuth2ToJSON(value.oauth2),
        'permission': ProjectServicePermissionToJSON(value.permission),
    };
}

