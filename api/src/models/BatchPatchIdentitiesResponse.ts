/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IdentityPatchResponse } from './IdentityPatchResponse';
import {
    IdentityPatchResponseFromJSON,
    IdentityPatchResponseFromJSONTyped,
    IdentityPatchResponseToJSON,
} from './IdentityPatchResponse';

/**
 * Patch identities response
 * @export
 * @interface BatchPatchIdentitiesResponse
 */
export interface BatchPatchIdentitiesResponse {
    /**
     * The patch responses for the individual identities.
     * @type {Array<IdentityPatchResponse>}
     * @memberof BatchPatchIdentitiesResponse
     */
    identities?: Array<IdentityPatchResponse>;
}

/**
 * Check if a given object implements the BatchPatchIdentitiesResponse interface.
 */
export function instanceOfBatchPatchIdentitiesResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BatchPatchIdentitiesResponseFromJSON(json: any): BatchPatchIdentitiesResponse {
    return BatchPatchIdentitiesResponseFromJSONTyped(json, false);
}

export function BatchPatchIdentitiesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BatchPatchIdentitiesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identities': !exists(json, 'identities') ? undefined : ((json['identities'] as Array<any>).map(IdentityPatchResponseFromJSON)),
    };
}

export function BatchPatchIdentitiesResponseToJSON(value?: BatchPatchIdentitiesResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identities': value.identities === undefined ? undefined : ((value.identities as Array<any>).map(IdentityPatchResponseToJSON)),
    };
}

