/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OAuth2ConsentSessionExpiresAt
 */
export interface OAuth2ConsentSessionExpiresAt {
    /**
     * 
     * @type {Date}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    access_token?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    authorize_code?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    id_token?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    par_context?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    refresh_token?: Date;
}

/**
 * Check if a given object implements the OAuth2ConsentSessionExpiresAt interface.
 */
export function instanceOfOAuth2ConsentSessionExpiresAt(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OAuth2ConsentSessionExpiresAtFromJSON(json: any): OAuth2ConsentSessionExpiresAt {
    return OAuth2ConsentSessionExpiresAtFromJSONTyped(json, false);
}

export function OAuth2ConsentSessionExpiresAtFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2ConsentSessionExpiresAt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'access_token': !exists(json, 'access_token') ? undefined : (new Date(json['access_token'])),
        'authorize_code': !exists(json, 'authorize_code') ? undefined : (new Date(json['authorize_code'])),
        'id_token': !exists(json, 'id_token') ? undefined : (new Date(json['id_token'])),
        'par_context': !exists(json, 'par_context') ? undefined : (new Date(json['par_context'])),
        'refresh_token': !exists(json, 'refresh_token') ? undefined : (new Date(json['refresh_token'])),
    };
}

export function OAuth2ConsentSessionExpiresAtToJSON(value?: OAuth2ConsentSessionExpiresAt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_token': value.access_token === undefined ? undefined : (value.access_token.toISOString()),
        'authorize_code': value.authorize_code === undefined ? undefined : (value.authorize_code.toISOString()),
        'id_token': value.id_token === undefined ? undefined : (value.id_token.toISOString()),
        'par_context': value.par_context === undefined ? undefined : (value.par_context.toISOString()),
        'refresh_token': value.refresh_token === undefined ? undefined : (value.refresh_token.toISOString()),
    };
}

