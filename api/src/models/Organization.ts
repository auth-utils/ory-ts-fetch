/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * B2B SSO Organization
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * The organization's creation date.
     * @type {Date}
     * @memberof Organization
     */
    readonly created_at: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof Organization
     */
    domains: Array<string>;
    /**
     * The organization's ID.
     * @type {string}
     * @memberof Organization
     */
    id: string;
    /**
     * The organization's human-readable label.
     * @type {string}
     * @memberof Organization
     */
    label: string;
    /**
     * The project's ID.
     * @type {string}
     * @memberof Organization
     */
    project_id: string;
    /**
     * The last time the organization was updated.
     * @type {Date}
     * @memberof Organization
     */
    readonly updated_at: Date;
}

/**
 * Check if a given object implements the Organization interface.
 */
export function instanceOfOrganization(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "domains" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "project_id" in value;
    isInstance = isInstance && "updated_at" in value;

    return isInstance;
}

export function OrganizationFromJSON(json: any): Organization {
    return OrganizationFromJSONTyped(json, false);
}

export function OrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Organization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created_at': (new Date(json['created_at'])),
        'domains': json['domains'],
        'id': json['id'],
        'label': json['label'],
        'project_id': json['project_id'],
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function OrganizationToJSON(value?: Organization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domains': value.domains,
        'id': value.id,
        'label': value.label,
        'project_id': value.project_id,
    };
}

