/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: latest
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UiText } from './UiText';
import {
    UiTextFromJSON,
    UiTextFromJSONTyped,
    UiTextToJSON,
} from './UiText';

/**
 * 
 * @export
 * @interface UiNodeTextAttributes
 */
export interface UiNodeTextAttributes {
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeTextAttributes
     */
    id: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
     * @type {string}
     * @memberof UiNodeTextAttributes
     */
    node_type: string;
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeTextAttributes
     */
    text: UiText;
}

/**
 * Check if a given object implements the UiNodeTextAttributes interface.
 */
export function instanceOfUiNodeTextAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "node_type" in value;
    isInstance = isInstance && "text" in value;

    return isInstance;
}

export function UiNodeTextAttributesFromJSON(json: any): UiNodeTextAttributes {
    return UiNodeTextAttributesFromJSONTyped(json, false);
}

export function UiNodeTextAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiNodeTextAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'node_type': json['node_type'],
        'text': UiTextFromJSON(json['text']),
    };
}

export function UiNodeTextAttributesToJSON(value?: UiNodeTextAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'node_type': value.node_type,
        'text': UiTextToJSON(value.text),
    };
}

